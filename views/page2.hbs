<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js"></script>
<script src="https://unpkg.com/@cubejs-client/core@0.19.56/dist/cubejs-client-core.umd.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0"></script>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src='https://cdn.plot.ly/plotly-2.12.1.min.js'></script>
<style>

.liquidFillGaugeText {
    font-family: Helvetica;
    font-weight: bold;
}

/* set the position of dropdown */
.dropdown {
     position: relative;
     display: inline-block;
}
/* set the size and position of button on web */
.button {
     font-size: 15px;
}
/* provide css to background of list items */ 
#list-items {
    position: relative;
    background-color: white;
    min-width: 185px;
}
/* provide css to list items */ 
#list-items a {
     display: inline-block;
     font-size: 18px;
     background-color: white;
     color: black;
     text-decoration: none;
     padding: 10px;
}
</style>

<div class="container" id="app">
    <button onclick="history.back()">BACK</button>
    {{!-- drop down --}}
    <br>
    <br>
    <div class="dropdown" class="row" class="card">
        <label>Choose Year</label>
        <center>
            <!-- dropdown list items will show when we click the drop button --> 
            <div id="list-items">
                {{!-- <input type="button" name="Year" value="All" id="AllYear" placeholder="All"> --}}
                <input type="button" name="Year" value="2015" id="2015" placeholder="2015">
                <input type="button" name="Year" value="2016" id="2016" placeholder="2016">
                <input type="button" name="Year" value="2017" id="2017" placeholder="2017">
                <input type="button" name="Year" value="2018" id="2018" placeholder="2018">
                <input type="button" name="Year" value="2019" id="2019" placeholder="2019">
            </div>
        </center>
    </div>
    
    <div class="col-md-3" >
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Yearwise Profit-Ratio</h5>
                <div class="card-text">
                    <h3 id="total-rows"><p id="valofyear"></p></h3>
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />

    {{!-- dashboard 2 --}}
    
  <div id="dashboard2">
    <br />
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">PROFIT %</h5>
                    <div class="card-text">
                      <svg id="fillgauge1" width="77%" height="150"></svg>
                    </div>
                </div>
            </div>
        </div>
        <div style="padding:30px ;" class="card">
            <h5 class="card-title">Segment</h5>
            <div>
                <input type="radio" name="Segment" value="Consumer" id="consumer">
                <label for="consumer">Consumer</label>
            </div>
            <div>
                <input type="radio" name="Segment" value="Corporate" id="corporate">
                <label for="corporate">Corporate</label>
            </div>
            <div>
                <input type="radio" name="Segment" value="HomeOffice" id="home office">
                <label for="home office">Home Office</label>
            </div>

            <p id="output"></p>
        </div>
{{!-- Category --}}
        <div  style="padding:30px ;" class="card">
            <h5 class="card-title">Category</h5>
            <div>
                <input type="radio" name="Category" value="Furniture" id="furniture">
                <label for="furniture">Furniture</label>
            </div>
            <div>
                <input type="radio" name="Category" value="OfficeSupplies" id="office supplies">
                <label for="office supplies">Office Supplies</label>
            </div>
            <div>
                <input type="radio" name="Category" value="Technology" id="technology">
                <label for="technology">Technology</label>
            </div>

            <p id="outputCat"></p>
        </div>
       
       <br>
       <div class="row">
        <div >
                {{!-- <div class="card"> --}}
                    <h5 class="card-title">Regionwise Sales</h5>
                    <div class="card-text" style="display: flex; flex-direction:row ;">
                        <div class="card" id='myDivCentral'><!-- Plotly chart will be drawn inside this DIV --></div>
                        <div class="card" id='myDivEast'><!-- Plotly chart will be drawn inside this DIV --></div>
                        <div class="card" id='myDivSouth'><!-- Plotly chart will be drawn inside this DIV --></div>
                        <div class="card" id='myDivWest'><!-- Plotly chart will be drawn inside this DIV --></div>
                    </div>
                </div>
            {{!-- </div> --}}
    </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-6">
            <div class="card">
              <div class="card-body">
                  <h5 class="card-title">Top 15 Sales by cities</h5>
                    <div class="card-text">
                    <canvas id="Cities"  width="97%" height="70"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
    </div> 

  </div>
</div>
<script type="module">    

  var cubejsApi = cubejs(
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIyIiwiYXBwSWQiOiIxIiwiaWF0IjoxNjU3NjExNjYyLCJleHAiOjE2NTc3ODQ0NjJ9.KU8tNbyDPqPTgxlPrlHGpJS73hxaXXWfYB5Q050sgaY',    
    { apiUrl: 'http://localhost:3000/cubejs-api/v1' }
  );
  var kpis = [ 
    { measure:"Dash.profitratio", element: "fillgauge1" }
  ];
  kpis.forEach(kpi => {
    cubejsApi.load({
      measures: [kpi.measure]
    }).then(resultSet => {
      document.getElementById(kpi.element).textContent =
        numeral(resultSet.totalRow()[kpi.measure]).format();
        loadLiquidFillGauge("fillgauge1", resultSet.totalRow()[kpi.measure]);
    })
  });

function liquidFillGaugeDefaultSettings() {
    return {
        minValue: 0,  maxValue: 100, circleThickness: 0.05,circleFillGap: 0.05, circleColor: "#178BCA",waveHeight: 0.05,waveCount: 3,waveRiseTime: 1000, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
        waveAnimateTime: 1000,waveRise: true,waveHeightScaling: true,waveAnimate: true,waveColor: "#178BCA", waveOffset: 0.25,textVertPosition: .8,textSize: 0.6, valueCountUp: true, displayPercent: true,textColor: "#045681", 
        waveTextColor: "#A4DBf8" 
    };
}

function loadLiquidFillGauge(elementId, value, config) {
  console.log("val1 = "+value)
    if (config == null) config = liquidFillGaugeDefaultSettings();

    var gauge = d3.select("#" + elementId);
    var radius = Math.min(parseInt(gauge.style("width")), parseInt(gauge.style("height"))) / 2;
    var locationX = parseInt(gauge.style("width")) / 2 - radius;
    var locationY = parseInt(gauge.style("height")) / 2 - radius;
    var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;

    var waveHeightScale;
    if (config.waveHeightScaling) {
        waveHeightScale = d3.scaleLinear() 
            .range([0, config.waveHeight, 0])
            .domain([0, 50, 100]);
    } else {
        waveHeightScale = d3.scaleLinear() 
            .range([config.waveHeight, config.waveHeight])
            .domain([0, 100]);
    }

    var textPixels = (config.textSize * radius / 2);
    var textFinalValue = parseFloat(value).toFixed(2);
    var textStartValue = config.valueCountUp ? config.minValue : textFinalValue;
    var percentText = config.displayPercent ? "%" : "";
    var circleThickness = config.circleThickness * radius;
    var circleFillGap = config.circleFillGap * radius;
    var fillCircleMargin = circleThickness + circleFillGap;
    var fillCircleRadius = radius - fillCircleMargin;
    var waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);

    var waveLength = fillCircleRadius * 2 / config.waveCount;
    var waveClipCount = 1 + config.waveCount;
    var waveClipWidth = waveLength * waveClipCount;

    // Rounding functions so that the correct number of decimal places is always displayed as the value counts up.
    var textRounder = function (value) {
        return Math.round(value);
    };
    if (parseFloat(textFinalValue) != parseFloat(textRounder(textFinalValue))) {
        textRounder = function (value) {
            return parseFloat(value).toFixed(1);
        };
    }
    if (parseFloat(textFinalValue) != parseFloat(textRounder(textFinalValue))) {
        textRounder = function (value) {
            return parseFloat(value).toFixed(2);
        };
    }

    // Data for building the clip wave area.
    var data = [];
    for (var i = 0; i <= 40 * waveClipCount; i++) {
        data.push({
            x: i / (40 * waveClipCount),
            y: (i / (40))
        });
    }

    // Scales for drawing the outer circle.
    var gaugeCircleX = d3.scaleLinear().range([0, 2 * Math.PI]).domain([0, 1]);
    var gaugeCircleY = d3.scaleLinear().range([0, radius]).domain([0, radius]);

    // Scales for controlling the size of the clipping path.
    var waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);
    var waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);

    // Scales for controlling the position of the clipping path.
    var waveRiseScale = d3.scaleLinear() 

    .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])
        .domain([0, 1]);
    var waveAnimateScale = d3.scaleLinear() 
        .range([0, waveClipWidth - fillCircleRadius * 2]) // Push the clip area one full wave then snap back.
    .domain([0, 1]);

    // Scale for controlling the position of the text within the gauge.
    var textRiseScaleY = d3.scaleLinear() 
        .range([fillCircleMargin + fillCircleRadius * 2, (fillCircleMargin + textPixels * 0.7)])
        .domain([0, 1]);

    // Center the gauge within the parent SVG.
    var gaugeGroup = gauge.append("g")
        .attr('transform', 'translate(' + locationX + ',' + locationY + ')');

    // Draw the outer circle.
    var gaugeCircleArc = d3.arc()
        .startAngle(gaugeCircleX(0))
        .endAngle(gaugeCircleX(1))
        .outerRadius(gaugeCircleY(radius))
        .innerRadius(gaugeCircleY(radius - circleThickness));
    gaugeGroup.append("path")
        .attr("d", gaugeCircleArc)
        .style("fill", config.circleColor)
        .attr('transform', 'translate(' + radius + ',' + radius + ')');

    // Text where the wave does not overlap.
    var text1 = gaugeGroup.append("text")
        .text(textRounder(textStartValue) + percentText)
        .attr("class", "liquidFillGaugeText")
        .attr("text-anchor", "middle")
        .attr("font-size", textPixels + "px")
        .style("fill", config.textColor)
        .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');

    // The clipping wave area.
    var clipArea = d3.area()
        .x(function (d) {
        return waveScaleX(d.x);
    })
        .y0(function (d) {
        return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI));
    })
        .y1(function (d) {
        return (fillCircleRadius * 2 + waveHeight);
    });
    var waveGroup = gaugeGroup.append("defs")
        .append("clipPath")
        .attr("id", "clipWave" + elementId);
    var wave = waveGroup.append("path")
        .datum(data)
        .attr("d", clipArea);

    // The inner circle with the clipping wave attached.
    var fillCircleGroup = gaugeGroup.append("g")
        .attr("clip-path", "url(#clipWave" + elementId + ")");
    fillCircleGroup.append("circle")
        .attr("cx", radius)
        .attr("cy", radius)
        .attr("r", fillCircleRadius)
        .style("fill", config.waveColor);

    // Text where the wave does overlap.
    var text2 = fillCircleGroup.append("text")
        .text(textRounder(textStartValue) + percentText)
        .attr("class", "liquidFillGaugeText")
        .attr("text-anchor", "middle")
        .attr("font-size", textPixels + "px")
        .style("fill", config.waveTextColor)
        .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');

    // Make the value count up.
    if (config.valueCountUp) {
        var textTween = function () {
            var i = d3.interpolate(this.textContent, textFinalValue);
            return function (t) {
                this.textContent = textRounder(i(t)) + percentText;
            }
        };
        text1.transition()
            .duration(config.waveRiseTime)
            .tween("text", textTween);
        text2.transition()
            .duration(config.waveRiseTime)
            .tween("text", textTween);
    }

    var waveGroupXPosition = fillCircleMargin + fillCircleRadius * 2 - waveClipWidth;
    if (config.waveRise) {
        waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(0) + ')')
            .transition()
            .duration(config.waveRiseTime)
            .attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')')
            .on("start", function () {
            wave.attr('transform', 'translate(1,0)');
        }); } else {
        waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')');
    }

    if (config.waveAnimate) animateWave();

    function animateWave() {
        wave.transition()
            .duration(config.waveAnimateTime)
            .ease("linear")
            .attr('transform', 'translate(' + waveAnimateScale(1) + ',0)')
            .on("end", function () {
            wave.attr('transform', 'translate(' + waveAnimateScale(0) + ',0)');
            animateWave(config.waveAnimateTime);
        });
    }
}

//for segment
const radioButtons = document.querySelectorAll('input[name="Segment"]');
        for(const radioButton of radioButtons){
            radioButton.addEventListener('change', showSelectedSeg);
        }        
        
        function showSelectedSeg(e) {
            console.log(e);
            if (this.checked) 
            {
                    document.querySelector('#output').innerText = `You selected ${this.value}`;
                    getvalue(this.value);

            }
        }

        function getvalue(value)
        {
            var kpis = [ { measure:"Dash."+value, element: "fillgauge1" }];
            kpis.forEach(kpi => 
                {
                    cubejsApi.load(
                        {
                            measures: [kpi.measure]
                        }).then(resultSet => 
                        {
                            document.getElementById(kpi.element).textContent =
                            numeral(resultSet.totalRow()[kpi.measure]).format();
                            console.log("answer = " + resultSet.totalRow()[kpi.measure])
                            loadLiquidFillGauge("fillgauge1", resultSet.totalRow()[kpi.measure]);
                        })
                });

        }

//for category
const radioButtonsCat = document.querySelectorAll('input[name="Category"]');
        for(const radioButton of radioButtonsCat){
            radioButton.addEventListener('change', showSelected);
        }        
        
        function showSelected(e) {
            console.log(e);
            if (this.checked) 
            {
                    document.querySelector('#outputCat').innerText = `You selected ${this.value}`;
                    getvalueCat(this.value);

            }
        }

        function getvalueCat(value)
        {
            var kpis = [ { measure:"Dash."+value, element: "fillgauge1" }];
            kpis.forEach(kpi => 
                {
                    cubejsApi.load(
                        {
                            measures: [kpi.measure]
                        }).then(resultSet => 
                        {
                            document.getElementById(kpi.element).textContent =
                            numeral(resultSet.totalRow()[kpi.measure]).format();
                            console.log("answer = " + resultSet.totalRow()[kpi.measure])
                            loadLiquidFillGauge("fillgauge1", resultSet.totalRow()[kpi.measure]);
                        })
                });

        }
//color generator
function getRandomColor() 
{
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++ ) 
    {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

//for top 15 cities

var chartJsData = function(resultSet) {
    return {
      datasets: [{
        data: resultSet.series()[0].series.map(function(r) { return r.value }),
        backgroundColor: [
          'rgb(255, 99, 132)',
          'rgb(255, 159, 64)',
          'rgb(255, 205, 86)',
          'rgb(75, 192, 192)',
          'rgb(54, 162, 235)',
          getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor()
        ]
      }],
      labels: resultSet.categories().map(function(c) { return c.category })
    }
  }

cubejsApi.load({
    measures: ["Dash.sales"],
    dimensions: ["Dash.Cities"],
    limit: 15
  }).then(resultSet => {
    new Chart(document.getElementById("Cities"), {
      type: 'horizontalBar',
      data: chartJsData(resultSet),
      options: { 
        layout: {
            padding: 0
        },  
        plugins: {
    datalabels: {
      display: false
    }
  },
        legend: { display: false },
        scales: {
      yAxes: [{ticks: {
        min: 0}
        }],
    }
      }
    })
  }); 



//for regions
function goval(region,num)
{
    var data = [
	{
		domain: { x: [0, 1], y: [0, 1] },
		value: num,
		title: { text: region },
		type: "indicator",
		mode: "gauge+number",
        gauge: { axis: { visible: true } },
	}
];

var layout = { width: 300, height: 300, margin: { t: 0, b: 0 } };
Plotly.newPlot('myDiv'+region, data, layout);
}


var kpis = [ { measure:"Dash.Central",region:"Central"},{ measure:"Dash.East",region:"East"},{ measure:"Dash.West",region:"West"},{ measure:"Dash.South",region:"South"}];
            kpis.forEach(kpi => 
                {
                    cubejsApi.load(
                        {
                            measures: [kpi.measure]
                            
                        }).then(resultSet => 
                        {
                            console.log("answer = " + resultSet.totalRow()[kpi.measure])
                            goval(kpi.region,resultSet.totalRow()[kpi.measure]);
                        })
                });


    const AllYear = document.querySelectorAll('input[name="Year"]');
    for (const year of AllYear) {
        year.addEventListener('click', showMessage);
    }

    function showMessage() {
        console.log(this.value);
       
        if (this.value === "2015") {
            dataload("2015");

        }
        else if (this.value === "2016") {
            dataload("2016");
        }
        else if (this.value === "2017") {
            dataload("2017");
        }
        else if (this.value === "2018") {
            dataload("2018");
        }
        else if (this.value === "2019") {
            dataload("2019");
        }
    }

    function dataload(yearofrequired) {
        cubejsApi.load({
            measures: ["dashplus.count"],
            dimensions: ["dashplus.shipdate"],

        }).then(resultSet => {
            console.log(resultSet['loadResponse']['data'])
            let profitofyear = 0;
            for (let i of resultSet['loadResponse']['data']) {
                let year = i['dashplus.shipdate'].split("/");
                if (year[2] === yearofrequired) {
                    profitofyear += i['dashplus.count'];
                    console.log(i['dashplus.count']);
                }
            }
            console.log("profit equal to = ", profitofyear);
            cubejsApi.load({
                measures: ["dashplus.salesofcount"],
                dimensions: ["dashplus.shipdate"],

            }).then(resultSet => {
                console.log(resultSet['loadResponse']['data'])
                let salesofyear = 0;
                for (let i of resultSet['loadResponse']['data']) {
                    let year = i['dashplus.shipdate'].split("/");
                    if (year[2] === yearofrequired) {
                        salesofyear += i['dashplus.salesofcount'];
                        console.log(i['dashplus.salesofcount']);
                    }
                }
                console.log("sales equal to = ", salesofyear);
                const valofyear = document.getElementById('valofyear');
                valofyear.innerText = numeral(profitofyear / salesofyear * 100).format() + "%";

            });
        });


        //for regions
        cubejsApi.load({
            measures: ["dashplus.sales"],
            dimensions: ["dashplus.region"],
            order: { 'dashplus.region': 'asc' },

        }).then(resultSet => {
            cubejsApi.load({
                measures: ["dashplus.shipdata"],
                dimensions: ["dashplus.region"],
                order: { 'dashplus.region': 'asc' },

            }).then(data => {
                //console.log("central" + resultSet['loadResponse']['data'].length);
                //console.log("data" + data['loadResponse']['data'].length)

                cubejsApi.load({
                    measures: ["dashplus.Central"],
                    dimensions: ["dashplus.region"],
                    order: { 'dashplus.region': 'asc' },
                }).then(regiondata => {
                    let cent = 0;
                    let es = 0;
                    let we = 0;
                    let so = 0;
                    for (let i = 0; i < data['loadResponse']['data'].length; i++) {
                        let year = data['loadResponse']['data'][i]['dashplus.shipdata'].split("/");

                        if (year[2] === yearofrequired) {
                            
                            if (regiondata['loadResponse']['data'][i]['dashplus.Central'] === 'Central') {
                                cent += parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']);
                                //console.log("data = "+ parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']));
                            }
                            //console.log(regiondata['loadResponse']['data'][i]['dashplus.Central']);
                            if (regiondata['loadResponse']['data'][i]['dashplus.Central'] === 'East') {
                                es += parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']);
                                //console.log("data = "+ parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']));
                            }
                            if (regiondata['loadResponse']['data'][i]['dashplus.Central'] === 'West') {
                                we += parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']);
                                //console.log("data = "+ parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']));
                            }
                            if (regiondata['loadResponse']['data'][i]['dashplus.Central'] === 'South') {
                                so += parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']);
                                //console.log("data = "+ parseFloat(resultSet['loadResponse']['data'][i]['dashplus.sales']));
                            }
                        }
                    }
                    console.log("answer = "+cent);
                    goval('Central',cent);
                    goval('East',es);
                    goval('West',we);
                    goval('South',so);
                })

            })

        });

    }
</script>