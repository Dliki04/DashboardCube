export interface Request {
    id: string;
    meta: any;
}
export interface CheckAuthPayload {
    request: Request;
    user: string | null;
}
export interface LoadPayload {
    request: Request;
    user: string;
    query: any;
    meta?: Map<string, string>;
}
export interface MetaPayload {
    request: Request;
    user: string | null;
}
export declare type SQLInterfaceOptions = {
    port?: number;
    pgPort?: number;
    nonce?: string;
    checkAuth: (payload: CheckAuthPayload) => unknown | Promise<unknown>;
    load: (payload: LoadPayload) => unknown | Promise<unknown>;
    meta: (payload: MetaPayload) => unknown | Promise<unknown>;
};
export declare function isSupported(): boolean;
declare type LogLevel = 'error' | 'warn' | 'info' | 'debug' | 'trace';
export declare const setupLogger: (logger: (extra: any) => unknown, logLevel: LogLevel) => void;
export declare type SqlInterfaceInstance = {
    __typename: 'sqlinterfaceinstance';
};
export declare const registerInterface: (options: SQLInterfaceOptions) => Promise<SqlInterfaceInstance>;
export declare const shutdownInterface: (instance: SqlInterfaceInstance) => Promise<void>;
export {};
//# sourceMappingURL=index.d.ts.map