import { CubeDescriptor, DatabaseSchema, TableName, TableSchema } from './ScaffoldingSchema';
import { ValueWithComments } from './ValueWithComments';
declare type SchemaContext = {
    dataSource?: string;
};
declare class MemberReference {
    member: any;
    constructor(member: any);
}
export declare class ScaffoldingTemplate {
    private readonly dbSchema;
    private readonly driver;
    private readonly scaffoldingSchema;
    constructor(dbSchema: DatabaseSchema, driver: any);
    protected escapeName(name: any): any;
    protected eligibleIdentifier(name: string): boolean;
    generateFilesByTableNames(tableNames: TableName[], schemaContext?: SchemaContext): {
        fileName: string;
        content: string;
    }[];
    generateFilesByCubeDescriptors(cubeDescriptors: CubeDescriptor[], schemaContext?: SchemaContext): {
        fileName: string;
        content: string;
    }[];
    protected resolveTableName(tableName: TableName): TableName;
    schemaDescriptorForTable(tableSchema: TableSchema, schemaContext?: SchemaContext): {
        dataSource?: string | undefined;
        cube: string;
        sql: string;
        preAggregations: ValueWithComments;
        joins: {
            [x: number]: {
                sql: string;
                relationship: any;
            };
        };
        measures: {
            count: {
                type: string;
                drillMembers: MemberReference[];
            };
        };
        dimensions: {
            [x: string]: {
                sql: string;
                type: any;
                title: any;
                primaryKey: boolean | undefined;
            };
        };
    };
    protected sqlForMember(m: any): string;
    protected memberTitle(m: any): any;
    protected memberName(member: any): string;
    protected renderFile(fileDescriptor: any): string;
    protected render(descriptor: any, level: any, appendComment?: string): any;
}
export {};
//# sourceMappingURL=ScaffoldingTemplate.d.ts.map