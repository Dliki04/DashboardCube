declare enum ColumnType {
    Time = "time",
    Number = "number",
    String = "string"
}
export declare enum MemberType {
    Measure = "measure",
    Dimension = "dimension",
    None = "none"
}
export declare type Dimension = {
    name: string;
    types: any[];
    title: string;
    isPrimaryKey?: boolean;
    type?: any;
};
export declare type TableName = string | [string, string];
declare type JoinRelationship = 'hasOne' | 'hasMany' | 'belongsTo';
export declare type CubeDescriptorMember = {
    name: string;
    title: string;
    memberType: MemberType;
    type?: string;
    types: string[];
    isId?: boolean;
    included?: boolean;
    isPrimaryKey?: boolean;
};
declare type Join = {
    thisTableColumn: string;
    tableName: TableName;
    cubeToJoin: string;
    columnToJoin: string;
    relationship: JoinRelationship;
};
export declare type CubeDescriptor = {
    cube: string;
    tableName: TableName;
    table: string;
    schema: string;
    members: CubeDescriptorMember[];
    joins: Join[];
};
export declare type TableSchema = {
    cube: string;
    tableName: TableName;
    schema: any;
    table: any;
    measures: any[];
    dimensions: Dimension[];
    drillMembers?: Dimension[];
    joins: any[];
};
export declare type DatabaseSchema = Record<string, Record<string, any>>;
declare type ScaffoldingSchemaOptions = {
    includeNonDictionaryMeasures?: boolean;
};
export declare class ScaffoldingSchema {
    private readonly dbSchema;
    private readonly options;
    private tableNamesToTables;
    constructor(dbSchema: DatabaseSchema, options?: ScaffoldingSchemaOptions);
    cubeDescriptors(tableNames: TableName[]): CubeDescriptor[];
    generateForTables(tableNames: TableName[]): TableSchema[];
    protected prepareTableNamesToTables(tableNames: TableName[]): void;
    resolveTableDefinition(tableName: TableName): any;
    protected tableSchema(tableName: TableName, includeJoins: boolean): TableSchema;
    protected parseTableName(tableName: any): any;
    protected dimensions(tableDefinition: any): Dimension[];
    protected numberMeasures(tableDefinition: any): any;
    protected fromMeasureDictionary(column: any): boolean;
    protected dimensionColumns(tableDefinition: any): any;
    protected joins(tableName: TableName, tableDefinition: any): any[];
    protected drillMembers(dimensions: Dimension[]): Dimension[];
    protected fromDrillMembersDictionary(dimension: any): boolean;
    protected timeColumnIndex(column: any): number;
    protected columnType(column: any): ColumnType;
}
export {};
//# sourceMappingURL=ScaffoldingSchema.d.ts.map