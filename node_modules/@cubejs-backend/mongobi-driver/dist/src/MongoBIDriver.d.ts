import { Connection, ConnectionOptions } from 'mysql2';
import { Pool } from 'generic-pool';
import { BaseDriver, DownloadQueryResultsOptions, DownloadQueryResultsResult, DriverInterface, StreamOptions } from '@cubejs-backend/query-orchestrator';
export interface MongoBIDriverConfiguration extends ConnectionOptions {
    storeTimezone?: string;
    maxPoolSize?: number;
}
export declare class MongoBIDriver extends BaseDriver implements DriverInterface {
    /**
     * Returns default concurrency value.
     */
    static getDefaultConcurrency(): number;
    protected readonly config: MongoBIDriverConfiguration;
    protected readonly pool: Pool<Connection>;
    constructor(config?: MongoBIDriverConfiguration);
    protected withConnection<T>(fn: (conn: Connection) => Promise<T>): Promise<T>;
    testConnection(): Promise<void>;
    query<R = unknown>(sql: string, values: unknown[]): Promise<R[]>;
    protected prepareConnection(conn: Connection): Promise<void>;
    stream(query: string, values: unknown[], options: StreamOptions): Promise<any>;
    downloadQueryResults(query: string, values: unknown[], options: DownloadQueryResultsOptions): Promise<DownloadQueryResultsResult>;
    release(): Promise<void>;
    informationSchemaQuery(): string;
    quoteIdentifier(identifier: string): string;
    readOnly(): boolean;
}
//# sourceMappingURL=MongoBIDriver.d.ts.map