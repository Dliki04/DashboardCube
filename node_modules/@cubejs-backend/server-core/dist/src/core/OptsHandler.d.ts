import { CreateOptions, SystemOptions, ServerCoreInitializedOptions, RequestContext, OrchestratorOptions, OrchestratorInitedOptions } from './types';
import type { CubejsServerCore } from './server';
/**
 * Driver service class.
 */
export declare class OptsHandler {
    private core;
    private createOptions;
    private systemOptions?;
    /**
     * Class constructor.
     */
    constructor(core: CubejsServerCore, createOptions: CreateOptions, systemOptions?: SystemOptions);
    /**
     * Decorated dbType flag.
     */
    private decoratedType;
    /**
     * Decorated driverFactory flag.
     */
    private decoratedFactory;
    /**
     * Map to store driverFactory function result type. This map needs to be
     * removed after dbType deprecation period will be passed.
     */
    private driverFactoryType;
    /**
     * Initialized options.
     */
    private initializedOptions;
    /**
     * Assert create options.
     */
    private assertOptions;
    /**
     * Assert value returned from the driver factory.
     */
    private assertDriverFactoryResult;
    /**
     * Assert value returned from the dbType function.
     */
    private assertDbTypeResult;
    /**
     * Default database factory function.
     */ private defaultDriverFactory;
    /**
     * Async driver factory getter.
     */
    private getDriverFactory;
    /**
     * Async driver type getter.
     */
    private getDbType;
    /**
     * Returns default driver concurrency if specified.
     */
    private getDriverConcurrency;
    /**
     * Wrap queueOptions into a function which evaluate concurrency on the fly.
     */
    private queueOptionsWrapper;
    /**
     * Initialize core options.
     */
    private initializeCoreOptions;
    /**
     * Determines whether current instance should be bootstraped in the
     * dev mode or not.
     */
    configuredAsDevServer(): boolean;
    /**
     * Determines whether current configuration is sutisfied system to process
     * queries.
     */
    configuredForQueryProcessing(): boolean;
    /**
     * Returns server core initialized options object.
     */
    getCoreInitializedOptions(): ServerCoreInitializedOptions;
    /**
     * Decorate `OrchestratorOptions` with `queueOptions` property which include
     * concurrency calculation logic.
     */
    getOrchestratorInitializedOptions(context: RequestContext, orchestratorOptions: OrchestratorOptions): OrchestratorInitedOptions;
}
//# sourceMappingURL=OptsHandler.d.ts.map