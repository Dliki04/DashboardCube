"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformPreAggregations = exports.transformJoins = exports.transformSegment = exports.transformDimension = exports.transformMeasure = exports.transformCube = exports.stringifyMemberSql = exports.handleDimensionCaseCondition = exports.getMemberPath = void 0;
function stringifyMemberSql(sql) {
    if (!sql) {
        return undefined;
    }
    const sqlStr = sql.toString();
    return sqlStr.substring(sqlStr.indexOf('=>') + 3);
}
exports.stringifyMemberSql = stringifyMemberSql;
function getMemberPath(name) {
    return {
        cubeName: name === null || name === void 0 ? void 0 : name.split('.')[0],
        memberName: name === null || name === void 0 ? void 0 : name.split('.')[1],
    };
}
exports.getMemberPath = getMemberPath;
function handleDimensionCaseCondition(caseCondition) {
    var _a;
    if (!caseCondition) {
        return undefined;
    }
    return {
        ...caseCondition,
        when: (_a = Object.values(caseCondition === null || caseCondition === void 0 ? void 0 : caseCondition.when)) === null || _a === void 0 ? void 0 : _a.map((item) => {
            var _a;
            return ({
                ...item,
                sql: stringifyMemberSql(item.sql),
                label: ((_a = item === null || item === void 0 ? void 0 : item.label) === null || _a === void 0 ? void 0 : _a.sql) ? stringifyMemberSql(item.label.sql) : item === null || item === void 0 ? void 0 : item.label,
            });
        }),
    };
}
exports.handleDimensionCaseCondition = handleDimensionCaseCondition;
function transformCube(cube, cubeDefinitions) {
    var _a, _b, _c, _d;
    return {
        ...cube,
        extends: stringifyMemberSql((_a = cubeDefinitions[cube === null || cube === void 0 ? void 0 : cube.name]) === null || _a === void 0 ? void 0 : _a.extends),
        sql: stringifyMemberSql((_b = cubeDefinitions[cube === null || cube === void 0 ? void 0 : cube.name]) === null || _b === void 0 ? void 0 : _b.sql),
        fileName: (_c = cubeDefinitions[cube === null || cube === void 0 ? void 0 : cube.name]) === null || _c === void 0 ? void 0 : _c.fileName,
        refreshKey: (_d = cubeDefinitions[cube === null || cube === void 0 ? void 0 : cube.name]) === null || _d === void 0 ? void 0 : _d.refreshKey,
    };
}
exports.transformCube = transformCube;
function transformMeasure(measure, cubeDefinitions) {
    var _a, _b, _c, _d, _e, _f, _g;
    const { cubeName, memberName } = getMemberPath(measure.name);
    return {
        ...measure,
        sql: stringifyMemberSql((_c = (_b = (_a = cubeDefinitions[cubeName]) === null || _a === void 0 ? void 0 : _a.measures) === null || _b === void 0 ? void 0 : _b[memberName]) === null || _c === void 0 ? void 0 : _c.sql),
        filters: (_g = (_f = (_e = (_d = cubeDefinitions[cubeName]) === null || _d === void 0 ? void 0 : _d.measures) === null || _e === void 0 ? void 0 : _e[memberName]) === null || _f === void 0 ? void 0 : _f.filters) === null || _g === void 0 ? void 0 : _g.map((filter) => ({
            sql: stringifyMemberSql(filter.sql),
        })),
    };
}
exports.transformMeasure = transformMeasure;
function transformDimension(dimension, cubeDefinitions) {
    var _a, _b, _c, _d, _e, _f;
    const { cubeName, memberName } = getMemberPath(dimension.name);
    return {
        ...dimension,
        sql: stringifyMemberSql((_c = (_b = (_a = cubeDefinitions[cubeName]) === null || _a === void 0 ? void 0 : _a.dimensions) === null || _b === void 0 ? void 0 : _b[memberName]) === null || _c === void 0 ? void 0 : _c.sql),
        case: handleDimensionCaseCondition((_f = (_e = (_d = cubeDefinitions[cubeName]) === null || _d === void 0 ? void 0 : _d.dimensions) === null || _e === void 0 ? void 0 : _e[memberName]) === null || _f === void 0 ? void 0 : _f.case),
    };
}
exports.transformDimension = transformDimension;
function transformSegment(segment, cubeDefinitions) {
    var _a, _b, _c;
    const { cubeName, memberName } = getMemberPath(segment.name);
    return {
        ...segment,
        sql: stringifyMemberSql((_c = (_b = (_a = cubeDefinitions[cubeName]) === null || _a === void 0 ? void 0 : _a.segments) === null || _b === void 0 ? void 0 : _b[memberName]) === null || _c === void 0 ? void 0 : _c.sql),
    };
}
exports.transformSegment = transformSegment;
function transformJoins(joins) {
    var _a;
    if (!joins) {
        return undefined;
    }
    return (_a = Object.entries(joins)) === null || _a === void 0 ? void 0 : _a.map(([joinName, join]) => ({
        ...join,
        name: joinName,
        sql: stringifyMemberSql(join.sql),
    }));
}
exports.transformJoins = transformJoins;
function transformPreAggregations(preAggregations) {
    var _a;
    if (!preAggregations) {
        return undefined;
    }
    return (_a = Object.entries(preAggregations)) === null || _a === void 0 ? void 0 : _a.map(([preAggregationName, preAggregation]) => ({
        ...preAggregation,
        name: preAggregationName,
        timeDimensionReference: stringifyMemberSql(preAggregation.timeDimensionReference),
        dimensionReferences: stringifyMemberSql(preAggregation.dimensionReferences),
        measureReferences: stringifyMemberSql(preAggregation.measureReferences),
    }));
}
exports.transformPreAggregations = transformPreAggregations;
//# sourceMappingURL=transformMetaExtended.js.map