export class BaseDriver {
    /**
     * Workaround for Type 'BaseDriver' has no construct signatures.
     *
     * @param {Object} [options]
     */
    constructor(_options?: {});
    informationSchemaQuery(): string;
    getSslOptions(): {};
    /**
     * @abstract
     */
    testConnection(): Promise<void>;
    /**
     * @abstract
     * @param {string} query
     * @param {Array<unknown>} values
     * @param {any} [options]
     * @return {Promise<Array<any>>}
     */
    query(_query: any, _values: any, _options?: {}): Promise<Array<any>>;
    /**
     * @public
     * @return {Promise<any>}
     */
    public downloadQueryResults(query: any, values: any, _options: any): Promise<any>;
    readOnly(): boolean;
    /**
     * @protected
     */
    protected informationColumnsSchemaReducer(result: any, i: any): {};
    tablesSchema(): Promise<any>;
    /**
     * @param {string} schemaName
     * @return {Promise<Array<unknown>>}
     */
    createSchemaIfNotExists(schemaName: string): Promise<Array<unknown>>;
    getTablesQuery(schemaName: any): Promise<any[]>;
    loadPreAggregationIntoTable(preAggregationTableName: any, loadSql: any, params: any, options: any): Promise<any[]>;
    /**
     * @param {string} tableName
     * @param {unknown} [options]
     * @return {Promise<unknown>}
     */
    dropTable(tableName: string, options?: unknown): Promise<unknown>;
    /**
     * @param {number} paramIndex
     * @return {string}
     */
    param(_paramIndex: any): string;
    testConnectionTimeout(): number;
    downloadTable(table: any, _options: any): Promise<{
        rows: any[];
    }>;
    uploadTable(table: any, columns: any, tableData: any): Promise<void>;
    uploadTableWithIndexes(table: any, columns: any, tableData: any, indexesSql: any, _uniqueKeyColumns: any, _queryTracingObj: any): Promise<void>;
    toColumnValue(value: any, _genericType: any): any;
    tableColumnTypes(table: any): Promise<{
        name: any;
        type: string;
    }[]>;
    createTable(quotedTableName: any, columns: any): Promise<any[]>;
    createTableSql(quotedTableName: any, columns: any): string;
    /**
     * @param {string} columnType
     * @return {string}
     */
    toGenericType(columnType: string): string;
    /**
     * @param {string} columnType
     * @return {string}
     */
    fromGenericType(columnType: string): string;
    /**
     * @param {string} identifier
     * @return {string}
     */
    quoteIdentifier(identifier: string): string;
    cancelCombinator(fn: any): any;
    setLogger(logger: any): void;
    logger: any;
    reportQueryUsage(usage: any, queryOptions: any): void;
    databasePoolError(error: any): void;
    /**
     * @public
     */
    public release(): Promise<void>;
    capabilities(): {};
    nowTimestamp(): number;
}
//# sourceMappingURL=BaseDriver.d.ts.map